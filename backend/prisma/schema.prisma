// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int      @id @default(autoincrement())
  username   String   @unique
  email      String   @unique
  password   String
  profilePic String
  difficulty Int
  level      Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  userProgress UserLevelProgress[]
}

model Chapter {
  id     Int     @id @default(autoincrement())
  title  String
  levels Level[]
}

model Level {
  id          Int       @id @default(autoincrement())
  title       String
  description String
  tasks       Task[]
  examples    Example[]
  chapterId   Int
  chapter     Chapter   @relation(fields: [chapterId], references: [id])

  userProgress UserLevelProgress[]
}

model Example {
  id      Int    @id @default(autoincrement())
  code    String
  levelId Int
  level   Level  @relation(fields: [levelId], references: [id])
}

model Task {
  id         Int    @id @default(autoincrement())
  task       String
  test       String
  difficulty Int
  levelId    Int
  level      Level  @relation(fields: [levelId], references: [id])
}

model UserLevelProgress {
  id         Int      @id @default(autoincrement())
  date       DateTime @default(now())
  progress   Int
  countError Int      @default(0)
  userId     Int
  levelId    Int
  user       User     @relation(fields: [userId], references: [id])
  level      Level    @relation(fields: [levelId], references: [id])

  @@unique([userId, levelId])
}
