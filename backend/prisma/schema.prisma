// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int      @id @default(autoincrement())
  username   String   @unique
  email      String   @unique
  password   String
  profilePic String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  userProgress         UserLevelProgress[]
  userInSystem         UserLogin[]
  userRatingInChapters UserChapterRating[]
  userTaskAttempts     TaskAttempt[]
}

model Chapter {
  id                  Int                 @id @default(autoincrement())
  title               String
  levels              Level[]
  userRatingInChapter UserChapterRating[]
}

model Level {
  id          Int       @id @default(autoincrement())
  title       String
  description String
  tasks       Task[]
  examples    Example[]
  chapterId   Int
  chapter     Chapter   @relation(fields: [chapterId], references: [id])

  userProgress UserLevelProgress[]
}

model Example {
  id      Int    @id @default(autoincrement())
  code    String
  levelId Int
  level   Level  @relation(fields: [levelId], references: [id])
}

model Task {
  id               Int           @id @default(autoincrement())
  title            String
  task             String
  help             String
  levelId          Int
  code             String
  difficulty       Int           @default(50)
  level            Level         @relation(fields: [levelId], references: [id])
  tests            Test[]
  userTaskAttempts TaskAttempt[]
}

model TaskAttempt {
  userId    Int
  taskId    Int
  attempts  Int      @default(1)
  hintsUsed Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
  task Task @relation(fields: [taskId], references: [id])

  @@id([userId, taskId])
}

model Test {
  id             Int  @id @default(autoincrement())
  taskId         Int
  task           Task @relation(fields: [taskId], references: [id])
  inputData      Json
  expectedOutput Json
}

model UserLevelProgress {
  date     DateTime @default(now())
  progress Int      @default(0)
  userId   Int
  levelId  Int
  user     User     @relation(fields: [userId], references: [id])
  level    Level    @relation(fields: [levelId], references: [id])

  @@id([userId, levelId])
}

model UserLogin {
  userId    Int
  loginDate DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@id([userId, loginDate])
}

model UserChapterRating {
  userId    Int
  chapterId Int
  rating    Int     @default(100)
  user      User    @relation(fields: [userId], references: [id])
  chapter   Chapter @relation(fields: [chapterId], references: [id])

  @@id([userId, chapterId])
}
